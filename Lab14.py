# === –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ14 ===
# –í–∞—Ä—ñ–∞–Ω—Ç 12
# –ü–æ–±—É–¥–æ–≤–∞ 3D –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ–π

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
from math import *
import string
from collections import Counter
import matplotlib as mpl
import pylab

# -------------------------------
# üî∏ –ó–ê–í–î–ê–ù–ù–Ø 1: –ì–Ü–°–¢–û–ì–†–ê–ú–ê –õ–Ü–¢–ï–†
# -------------------------------

print("\nüî∏ –ó–ê–í–î–ê–ù–ù–Ø 1: –ì–Ü–°–¢–û–ì–†–ê–ú–ê –õ–Ü–¢–ï–† –ó –§–ê–ô–õ–£\n")

try:
    with open('text.txt', 'r', encoding='utf-8') as file:
        text = file.read().lower()
except FileNotFoundError:
    print("‚ùå –§–∞–π–ª 'text.txt' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª —É —Ç—ñ–π –∂–µ –ø–∞–ø—Ü—ñ –∑ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
    text = "—Ç–µ—Å—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É histogram example text"

filtered_text = [char for char in text if char in string.ascii_lowercase or char in '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è']
letter_counts = Counter(filtered_text)
letters = list(letter_counts.keys())
frequencies = list(letter_counts.values())

plt.figure(figsize=(12, 6))
plt.bar(letters, frequencies, color='skyblue')
plt.title('–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–∏ –ª—ñ—Ç–µ—Ä —É —Ç–µ–∫—Å—Ç—ñ')
plt.xlabel('–õ—ñ—Ç–µ—Ä–∏')
plt.ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
plt.grid(True, axis='y')
plt.show()


# -----------------------------------------------------
# üîπ –ó–ê–í–î–ê–ù–ù–Ø 2: –ê–ù–Ü–ú–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á –ó –õ–†13 (–≤–∞—Ä—ñ–∞–Ω—Ç 12)
# -----------------------------------------------------

print("\nüîπ –ó–ê–í–î–ê–ù–ù–Ø 2: –ê–ù–Ü–ú–ê–¶–Ü–Ø –§–£–ù–ö–¶–Ü–á (5¬∑sin(10x)¬∑sin(3x)) / x^x\n")

def func(x):
    return (5 * np.sin(10 * x) * np.sin(3 * x)) / (x ** x)

x = np.linspace(0.01, 8, 1000)
y = func(x)

fig, ax = plt.subplots()
line, = ax.plot([], [], 'c-', label='(5¬∑sin(10x)¬∑sin(3x)) / x^x')
ax.set_xlim(0, 8)
ax.set_ylim(-4, 4)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('–ê–Ω—ñ–º–æ–≤–∞–Ω–∞ –ø–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞')
ax.grid(True)
ax.legend()

xdata, ydata = [], []

def init():
    line.set_data([], [])
    return line,

def update(frame):
    xdata.append(x[frame])
    ydata.append(y[frame])
    line.set_data(xdata, ydata)
    return line,

ani = animation.FuncAnimation(fig, update, frames=len(x), init_func=init, blit=True, interval=5, repeat=False)
plt.show()


# -------------------------------------------------
# üî∏ –ü–†–ò–ö–õ–ê–î 1: –ü–æ–±—É–¥–æ–≤–∞ —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–æ—ó –∫—Ä–∏–≤–æ—ó
# -------------------------------------------------

# -------------------------------------------------
# üî∏ –ü–†–ò–ö–õ–ê–î 1: –ü–æ–±—É–¥–æ–≤–∞ —Ç—Ä–∏–≤–∏–º—ñ—Ä–Ω–æ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–æ—ó –∫—Ä–∏–≤–æ—ó
# -------------------------------------------------

print("\nüî∏ –ü–†–ò–ö–õ–ê–î 1: 3D –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∞ –∫—Ä–∏–≤–∞\n")

mpl.rcParams['legend.fontsize'] = 10
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')  # ‚Üê –û—Å—å —Ç—É—Ç –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ

theta = np.linspace(-4 * np.pi, 4 * np.pi, 100)
z = np.linspace(-2, 2, 100)
r = z**2 + 1
x = r * np.sin(theta)
y = r * np.cos(theta)

ax.plot(x, y, z, label='–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–Ω–∞ –∫—Ä–∏–≤–∞')
ax.legend()
plt.show()



# ----------------------------------------------------
# üîπ –ü–†–ò–ö–õ–ê–î 2: –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó z=sin(0.3x)*cos(0.75y)
# ----------------------------------------------------

print("\nüîπ –ü–†–ò–ö–õ–ê–î 2: –ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó z=sin(0.3x)*cos(0.75y)\n")

def makeData():
    x = np.arange(-10, 10, 0.5)
    y = np.arange(-10, 10, 0.5)
    xgrid, ygrid = np.meshgrid(x, y)
    zgrid = np.sin(xgrid * 0.3) * np.cos(ygrid * 0.75)
    return xgrid, ygrid, zgrid

x, y, z = makeData()
fig = pylab.figure()
axes = Axes3D(fig)
axes.plot_surface(x, y, z, rstride=1, cstride=1, cmap='viridis')
pylab.show()


# -------------------------------------------------
# üî∏ –ü–†–ò–ö–õ–ê–î 3: –ü–æ–±—É–¥–æ–≤–∞ 3D –ø–æ–≤–µ—Ä—Ö–Ω—ñ (—Å—Ñ–µ—Ä–∞)
# -------------------------------------------------

print("\nüî∏ –ü–†–ò–ö–õ–ê–î 3: –ü–æ–±—É–¥–æ–≤–∞ 3D –ø–æ–≤–µ—Ä—Ö–Ω—ñ (—Å—Ñ–µ—Ä–∞)\n")

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x = 10 * np.outer(np.cos(u), np.sin(v))
y = 10 * np.outer(np.sin(u), np.sin(v))
z = 10 * np.outer(np.ones(np.size(u)), np.cos(v))

ax.plot_surface(x, y, z, color='b')
plt.show()


# ----------------------------------------------------------
# üîπ –ü–†–ò–ö–õ–ê–î 4: –ê–Ω—ñ–º–æ–≤–∞–Ω–∞ –ø–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó y = sin(2œÄt)e^(-t/10)
# ----------------------------------------------------------

print("\nüîπ –ü–†–ò–ö–õ–ê–î 4: –ê–Ω—ñ–º–æ–≤–∞–Ω–∞ –ø–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ y = sin(2œÄt) * e^(-t/10)\n")

def data_gen(t=0):
    cnt = 0
    while cnt < 1000:
        cnt += 1
        t += 0.1
        yield t, sin(2 * pi * t) * exp(-t / 10.)

def init_anim():
    ax.set_ylim(-1.1, 1.1)
    ax.set_xlim(0, 10)
    del xdata[:]
    del ydata[:]
    line.set_data(xdata, ydata)
    return line,

fig, ax = plt.subplots()
line, = ax.plot([], [], lw=2)
ax.grid()
xdata, ydata = [], []

def run(data):
    t, y = data
    xdata.append(t)
    ydata.append(y)
    xmin, xmax = ax.get_xlim()
    if t >= xmax:
        ax.set_xlim(xmin, 2 * xmax)
        ax.figure.canvas.draw()
    line.set_data(xdata, ydata)
    return line,

ani = animation.FuncAnimation(fig, run, data_gen, blit=False, interval=10, repeat=False, init_func=init_anim)
plt.show()
